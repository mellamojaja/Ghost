@model Ghost.MVC.Models.GamePlayModel

@{
    ViewBag.Title = "Results";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-inline col-md-offset-2">
        
        <div class="form-group">
            <div>
                <span class="word">@Html.Raw("Word >")</span>
            </div>
        </div>
        
        <div class="form-group">
            <div>                
                @for (var i = 0; i < Model.Word.Length; i++)
                {
                    if (i % 2 == 0)
                    {
                        <span class="human-player word">@Html.Raw(Model.Word.Substring(i, 1))</span>
                    }
                    else
                    {
                        <span class="computer-player word">@Html.Raw(Model.Word.Substring(i, 1))</span>
                    }
                }
            </div>
        </div>
        
        <div class="form-group">
            @Html.EditorFor(model => model.NewMove, new { htmlAttributes = new { @class = "form-control letter-input disabled" } })
        </div>        
        
        <div class="form-group">
            <button type="submit" name="command" value="PlayAgain" class="btn btn-primary">Play again</button>
        </div>
    </div>

    <div class="form-horizontal col-md-offset-1 col-md-10">
        <div class="row">
            <div class="form-group">
                <div>
                    <div class="alert alert-danger">
                        @Html.Raw(@Model.WinnerExplanation)
                    </div>
                </div>
            </div>
        </div>
    </div>

    <hr />

        <div class="form-horizontal">
            <div class="row">
                <div class="col-md-offset-1 col-md-4">
                    @*Human player region*@
                    <div class="form-group">
                        <div>
                            <h4>
                                Player 1: @Model.Player.Name
                                <span class="badge">@Model.Player.NumberOfVictories / @Model.Player.NumberOfGames</span>
                            </h4>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ShowPlayerHelp, htmlAttributes: new { @class = "control-label" })
                        <div>
                            <div class="checkbox">
                                @Html.CheckBoxFor(model => model.ShowPlayerHelp, htmlAttributes: new { @class = "disabled" })
                            </div>
                        </div>
                    </div>
                    @if (Model.ShowPlayerHelp == true)
                    {
                        <div class="form-group">
                            <div>
                                <div id="humanPlayerHelp" class="alert alert-info">
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="col-md-offset-1 col-md-4">
                    @*Computer player region*@
                    <div class="form-group">
                        <div>
                            <h4>
                                Player 2: Computer
                            </h4>
                        </div>
                    </div>
                    @if (Model.ComputerLastMoveExplanation.Length > 0)
                    {
                        <div class="form-group">
                            <div>
                                <div id="computerPlayerHelp" class="alert alert-info">
                                    @Html.Raw(@Model.ComputerLastMoveExplanation)
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
                    }

